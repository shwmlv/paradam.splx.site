<?php


namespace app\components;

use danog\MadelineProto\API;
use Yii;
use yii\base\BaseObject;

class Telegram extends BaseObject
{
	public $telephone;
	public $message;
	public $username;
	public $mp;

	public function __construct($telephone, $message, $username = 'User', $config = [])
	{
		parent::__construct($config);
		$this->mp = new API('session/session.madeline', Yii::$app->params['api']['tg']);
		$this->mp->start();

		$this->telephone = $telephone;
		$this->message = $message;

		if ($username != 'User') {
			$this->username = $username;
		} else {
			$this->username = 'User ' . strtotime(date('YmdHis'));
		}
	}

	public function init()
	{
		parent::init(); // TODO: Change the autogenerated stub
	}

	public function message()
	{
		$this->mp->contacts->addContact(['add_phone_privacy_exception' => true, 'id' => 'me', 'first_name' => $this->username, 'last_name' => '', 'phone' => $this->telephone]);
		$import = $this->mp->contacts->importContacts(['contacts' => [['_' => 'inputPhoneContact', 'client_id' => 0, 'phone' => $this->telephone, 'first_name' => $this->username, 'last_name' => '']]]);

		if (!empty($import['imported'][0]['user_id'])) {
			$this->mp->messages->sendMessage(['peer' => $import['imported'][0]['user_id'], 'message' => $this->message]);

			if ($this->mp->updates->getState()) {
				return Yii::t('app', 'Сообщение отправленно!'); // TODO-splaandrey: создать категорию для переводом
			} else {
				return Yii::t('app', 'Ошибка при отправке сообщения!'); // TODO-splaandrey: создать категорию для переводом
			}
		} else {
			return Yii::t('app', 'Пользователь не найден!'); // TODO-splaandrey: создать категорию для переводом
		}
	}
}